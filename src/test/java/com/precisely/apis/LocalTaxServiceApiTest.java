/*
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.precisely.apis;

import com.precisely.ApiException;
import com.precisely.apis.model.ErrorInfo;
import com.precisely.apis.model.IPDTaxByAddressBatchRequest;
import com.precisely.apis.model.TaxAddressRequest;
import com.precisely.apis.model.TaxDistrictResponse;
import com.precisely.apis.model.TaxDistrictResponseList;
import com.precisely.apis.model.TaxLocationRequest;
import com.precisely.apis.model.TaxRateAddressRequest;
import com.precisely.apis.model.TaxRateLocationRequest;
import com.precisely.apis.model.TaxRateResponse;
import com.precisely.apis.model.TaxResponses;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocalTaxServiceApi
 */
@Ignore
public class LocalTaxServiceApiTest {

    private final LocalTaxServiceApi api = new LocalTaxServiceApi();

    
    /**
     * Post Tax By Address
     *
     * This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchTaxByAddressTest() throws ApiException {
        String taxRateTypeId = null;
        TaxAddressRequest taxAddressRequest = null;
                TaxResponses response = api.getBatchTaxByAddress(taxRateTypeId, taxAddressRequest);
        // TODO: test validations
    }
    
    /**
     * Post Tax By Location
     *
     * This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchTaxByLocationTest() throws ApiException {
        String taxRateTypeId = null;
        TaxLocationRequest taxLocationRequest = null;
                TaxResponses response = api.getBatchTaxByLocation(taxRateTypeId, taxLocationRequest);
        // TODO: test validations
    }
    
    /**
     * Post Taxrate By Address
     *
     * This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchTaxRateByAddressTest() throws ApiException {
        String taxRateTypeId = null;
        TaxRateAddressRequest taxRateAddressRequest = null;
                TaxResponses response = api.getBatchTaxRateByAddress(taxRateTypeId, taxRateAddressRequest);
        // TODO: test validations
    }
    
    /**
     * Post Taxrate By Location
     *
     * This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchTaxRateByLocationTest() throws ApiException {
        String taxRateTypeId = null;
        TaxRateLocationRequest taxRateLocationRequest = null;
                TaxResponses response = api.getBatchTaxRateByLocation(taxRateTypeId, taxRateLocationRequest);
        // TODO: test validations
    }
    
    /**
     * Get IPD Tax by Address
     *
     * Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIPDTaxByAddressTest() throws ApiException {
        String address = null;
        String returnLatLongFields = null;
        String latLongFormat = null;
                TaxDistrictResponse response = api.getIPDTaxByAddress(address, returnLatLongFields, latLongFormat);
        // TODO: test validations
    }
    
    /**
     * Get IPD Tax for batch requests.
     *
     * This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIPDTaxByAddressBatchTest() throws ApiException {
        IPDTaxByAddressBatchRequest ipDTaxByAddressBatchRequest = null;
                TaxDistrictResponseList response = api.getIPDTaxByAddressBatch(ipDTaxByAddressBatchRequest);
        // TODO: test validations
    }
    
    /**
     * Get Tax By Address
     *
     * This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecificTaxByAddressTest() throws ApiException {
        String taxRateTypeId = null;
        String address = null;
        String purchaseAmount = null;
                TaxRateResponse response = api.getSpecificTaxByAddress(taxRateTypeId, address, purchaseAmount);
        // TODO: test validations
    }
    
    /**
     * Get Tax By Location
     *
     * This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecificTaxByLocationTest() throws ApiException {
        String taxRateTypeId = null;
        String latitude = null;
        String longitude = null;
        String purchaseAmount = null;
                TaxRateResponse response = api.getSpecificTaxByLocation(taxRateTypeId, latitude, longitude, purchaseAmount);
        // TODO: test validations
    }
    
    /**
     * Get Taxrate By Address
     *
     * Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecificTaxRateByAddressTest() throws ApiException {
        String taxRateTypeId = null;
        String address = null;
                TaxRateResponse response = api.getSpecificTaxRateByAddress(taxRateTypeId, address);
        // TODO: test validations
    }
    
    /**
     * Get Taxrate By Location
     *
     * Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecificTaxRateByLocationTest() throws ApiException {
        String taxRateTypeId = null;
        String latitude = null;
        String longitude = null;
                TaxRateResponse response = api.getSpecificTaxRateByLocation(taxRateTypeId, latitude, longitude);
        // TODO: test validations
    }
    
}
