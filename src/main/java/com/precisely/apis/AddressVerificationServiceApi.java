/*
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.precisely.apis;

import com.precisely.ApiCallback;
import com.precisely.ApiClient;
import com.precisely.ApiException;
import com.precisely.ApiResponse;
import com.precisely.Configuration;
import com.precisely.Pair;
import com.precisely.ProgressRequestBody;
import com.precisely.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.precisely.apis.model.ErrorInfo;
import com.precisely.apis.model.GetCityStateProvinceAPIRequest;
import com.precisely.apis.model.GetCityStateProvinceAPIResponse;
import com.precisely.apis.model.GetPostalCodesAPIRequest;
import com.precisely.apis.model.GetPostalCodesAPIResponse;
import com.precisely.apis.model.ValidateMailingAddressPremiumRequest;
import com.precisely.apis.model.ValidateMailingAddressPremiumResponse;
import com.precisely.apis.model.ValidateMailingAddressProRequest;
import com.precisely.apis.model.ValidateMailingAddressProResponse;
import com.precisely.apis.model.ValidateMailingAddressRequest;
import com.precisely.apis.model.ValidateMailingAddressResponse;
import com.precisely.apis.model.ValidateMailingAddressUSCANAPIRequest;
import com.precisely.apis.model.ValidateMailingAddressUSCANAPIResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressVerificationServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressVerificationServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressVerificationServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCityStateProvince
     * @param inputAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCityStateProvinceCall(GetCityStateProvinceAPIRequest inputAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputAddress;

        // create path and map variables
        String localVarPath = "/addressverification/v1/getcitystateprovince/results.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCityStateProvinceValidateBeforeCall(GetCityStateProvinceAPIRequest inputAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling getCityStateProvince(Async)");
        }
        

        okhttp3.Call localVarCall = getCityStateProvinceCall(inputAddress, _callback);
        return localVarCall;

    }

    /**
     * GetCityStateProvince
     * GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
     * @param inputAddress  (required)
     * @return GetCityStateProvinceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetCityStateProvinceAPIResponse getCityStateProvince(GetCityStateProvinceAPIRequest inputAddress) throws ApiException {
        ApiResponse<GetCityStateProvinceAPIResponse> localVarResp = getCityStateProvinceWithHttpInfo(inputAddress);
        return localVarResp.getData();
    }

    /**
     * GetCityStateProvince
     * GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;GetCityStateProvinceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCityStateProvinceAPIResponse> getCityStateProvinceWithHttpInfo(GetCityStateProvinceAPIRequest inputAddress) throws ApiException {
        okhttp3.Call localVarCall = getCityStateProvinceValidateBeforeCall(inputAddress, null);
        Type localVarReturnType = new TypeToken<GetCityStateProvinceAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetCityStateProvince (asynchronously)
     * GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
     * @param inputAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCityStateProvinceAsync(GetCityStateProvinceAPIRequest inputAddress, final ApiCallback<GetCityStateProvinceAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCityStateProvinceValidateBeforeCall(inputAddress, _callback);
        Type localVarReturnType = new TypeToken<GetCityStateProvinceAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPostalCodes
     * @param inputAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostalCodesCall(GetPostalCodesAPIRequest inputAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputAddress;

        // create path and map variables
        String localVarPath = "/addressverification/v1/getpostalcodes/results.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostalCodesValidateBeforeCall(GetPostalCodesAPIRequest inputAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling getPostalCodes(Async)");
        }
        

        okhttp3.Call localVarCall = getPostalCodesCall(inputAddress, _callback);
        return localVarCall;

    }

    /**
     * GetPostalCodes
     * GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
     * @param inputAddress  (required)
     * @return GetPostalCodesAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetPostalCodesAPIResponse getPostalCodes(GetPostalCodesAPIRequest inputAddress) throws ApiException {
        ApiResponse<GetPostalCodesAPIResponse> localVarResp = getPostalCodesWithHttpInfo(inputAddress);
        return localVarResp.getData();
    }

    /**
     * GetPostalCodes
     * GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;GetPostalCodesAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPostalCodesAPIResponse> getPostalCodesWithHttpInfo(GetPostalCodesAPIRequest inputAddress) throws ApiException {
        okhttp3.Call localVarCall = getPostalCodesValidateBeforeCall(inputAddress, null);
        Type localVarReturnType = new TypeToken<GetPostalCodesAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetPostalCodes (asynchronously)
     * GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
     * @param inputAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostalCodesAsync(GetPostalCodesAPIRequest inputAddress, final ApiCallback<GetPostalCodesAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostalCodesValidateBeforeCall(inputAddress, _callback);
        Type localVarReturnType = new TypeToken<GetPostalCodesAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMailingAddress
     * @param inputAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressCall(ValidateMailingAddressRequest inputAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputAddress;

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddress/results.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMailingAddressValidateBeforeCall(ValidateMailingAddressRequest inputAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddress(Async)");
        }
        

        okhttp3.Call localVarCall = validateMailingAddressCall(inputAddress, _callback);
        return localVarCall;

    }

    /**
     * ValidateMailingAddress
     * ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ValidateMailingAddressResponse validateMailingAddress(ValidateMailingAddressRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressResponse> localVarResp = validateMailingAddressWithHttpInfo(inputAddress);
        return localVarResp.getData();
    }

    /**
     * ValidateMailingAddress
     * ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateMailingAddressResponse> validateMailingAddressWithHttpInfo(ValidateMailingAddressRequest inputAddress) throws ApiException {
        okhttp3.Call localVarCall = validateMailingAddressValidateBeforeCall(inputAddress, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidateMailingAddress (asynchronously)
     * ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
     * @param inputAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressAsync(ValidateMailingAddressRequest inputAddress, final ApiCallback<ValidateMailingAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMailingAddressValidateBeforeCall(inputAddress, _callback);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMailingAddressPremium
     * @param inputAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressPremiumCall(ValidateMailingAddressPremiumRequest inputAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputAddress;

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddresspremium/results.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMailingAddressPremiumValidateBeforeCall(ValidateMailingAddressPremiumRequest inputAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddressPremium(Async)");
        }
        

        okhttp3.Call localVarCall = validateMailingAddressPremiumCall(inputAddress, _callback);
        return localVarCall;

    }

    /**
     * ValidateMailingAddressPremium
     * ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressPremiumResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ValidateMailingAddressPremiumResponse validateMailingAddressPremium(ValidateMailingAddressPremiumRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressPremiumResponse> localVarResp = validateMailingAddressPremiumWithHttpInfo(inputAddress);
        return localVarResp.getData();
    }

    /**
     * ValidateMailingAddressPremium
     * ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressPremiumResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateMailingAddressPremiumResponse> validateMailingAddressPremiumWithHttpInfo(ValidateMailingAddressPremiumRequest inputAddress) throws ApiException {
        okhttp3.Call localVarCall = validateMailingAddressPremiumValidateBeforeCall(inputAddress, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressPremiumResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidateMailingAddressPremium (asynchronously)
     * ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
     * @param inputAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressPremiumAsync(ValidateMailingAddressPremiumRequest inputAddress, final ApiCallback<ValidateMailingAddressPremiumResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMailingAddressPremiumValidateBeforeCall(inputAddress, _callback);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressPremiumResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMailingAddressPro
     * @param inputAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressProCall(ValidateMailingAddressProRequest inputAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputAddress;

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddresspro/results.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMailingAddressProValidateBeforeCall(ValidateMailingAddressProRequest inputAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddressPro(Async)");
        }
        

        okhttp3.Call localVarCall = validateMailingAddressProCall(inputAddress, _callback);
        return localVarCall;

    }

    /**
     * ValidateMailingAddressPro
     * ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressProResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ValidateMailingAddressProResponse validateMailingAddressPro(ValidateMailingAddressProRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressProResponse> localVarResp = validateMailingAddressProWithHttpInfo(inputAddress);
        return localVarResp.getData();
    }

    /**
     * ValidateMailingAddressPro
     * ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressProResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateMailingAddressProResponse> validateMailingAddressProWithHttpInfo(ValidateMailingAddressProRequest inputAddress) throws ApiException {
        okhttp3.Call localVarCall = validateMailingAddressProValidateBeforeCall(inputAddress, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressProResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidateMailingAddressPro (asynchronously)
     * ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
     * @param inputAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressProAsync(ValidateMailingAddressProRequest inputAddress, final ApiCallback<ValidateMailingAddressProResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMailingAddressProValidateBeforeCall(inputAddress, _callback);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressProResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMailingAddressUSCAN
     * @param inputAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressUSCANCall(ValidateMailingAddressUSCANAPIRequest inputAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputAddress;

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddressuscan/results.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMailingAddressUSCANValidateBeforeCall(ValidateMailingAddressUSCANAPIRequest inputAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddressUSCAN(Async)");
        }
        

        okhttp3.Call localVarCall = validateMailingAddressUSCANCall(inputAddress, _callback);
        return localVarCall;

    }

    /**
     * ValidateMailingAddressUSCAN
     * ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressUSCANAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ValidateMailingAddressUSCANAPIResponse validateMailingAddressUSCAN(ValidateMailingAddressUSCANAPIRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressUSCANAPIResponse> localVarResp = validateMailingAddressUSCANWithHttpInfo(inputAddress);
        return localVarResp.getData();
    }

    /**
     * ValidateMailingAddressUSCAN
     * ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressUSCANAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateMailingAddressUSCANAPIResponse> validateMailingAddressUSCANWithHttpInfo(ValidateMailingAddressUSCANAPIRequest inputAddress) throws ApiException {
        okhttp3.Call localVarCall = validateMailingAddressUSCANValidateBeforeCall(inputAddress, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressUSCANAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidateMailingAddressUSCAN (asynchronously)
     * ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
     * @param inputAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMailingAddressUSCANAsync(ValidateMailingAddressUSCANAPIRequest inputAddress, final ApiCallback<ValidateMailingAddressUSCANAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMailingAddressUSCANValidateBeforeCall(inputAddress, _callback);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressUSCANAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
