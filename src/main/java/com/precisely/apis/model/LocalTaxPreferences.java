/*
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 16.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.precisely.apis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * LocalTaxPreferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-31T12:37:28.987707300+05:30[Asia/Calcutta]")
public class LocalTaxPreferences {
  public static final String SERIALIZED_NAME_CUSTOM_PREFERENCES = "customPreferences";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PREFERENCES)
  private Map<String, Object> customPreferences = null;

  public static final String SERIALIZED_NAME_DEFAULT_BUFFER_WIDTH = "defaultBufferWidth";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BUFFER_WIDTH)
  private String defaultBufferWidth;

  public static final String SERIALIZED_NAME_DISTANCE_UNITS = "distanceUnits";
  @SerializedName(SERIALIZED_NAME_DISTANCE_UNITS)
  private String distanceUnits;

  public static final String SERIALIZED_NAME_FALLBACK_TO_GEOGRAPHIC = "fallbackToGeographic";
  @SerializedName(SERIALIZED_NAME_FALLBACK_TO_GEOGRAPHIC)
  private String fallbackToGeographic;

  public static final String SERIALIZED_NAME_LAT_LONG_FORMAT = "latLongFormat";
  @SerializedName(SERIALIZED_NAME_LAT_LONG_FORMAT)
  private String latLongFormat;

  public static final String SERIALIZED_NAME_LAT_LONG_OFFSET = "latLongOffset";
  @SerializedName(SERIALIZED_NAME_LAT_LONG_OFFSET)
  private String latLongOffset;

  public static final String SERIALIZED_NAME_MATCH_MODE = "matchMode";
  @SerializedName(SERIALIZED_NAME_MATCH_MODE)
  private String matchMode;

  public static final String SERIALIZED_NAME_OUTPUT_CASING = "outputCasing";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CASING)
  private String outputCasing;

  public static final String SERIALIZED_NAME_RETURN_CENSUS_FIELDS = "returnCensusFields";
  @SerializedName(SERIALIZED_NAME_RETURN_CENSUS_FIELDS)
  private String returnCensusFields;

  public static final String SERIALIZED_NAME_RETURN_LAT_LONG_FIELDS = "returnLatLongFields";
  @SerializedName(SERIALIZED_NAME_RETURN_LAT_LONG_FIELDS)
  private String returnLatLongFields;

  public static final String SERIALIZED_NAME_SQUEEZE = "squeeze";
  @SerializedName(SERIALIZED_NAME_SQUEEZE)
  private String squeeze;

  public static final String SERIALIZED_NAME_TAX_RATETYPE_I_D = "taxRatetypeID";
  @SerializedName(SERIALIZED_NAME_TAX_RATETYPE_I_D)
  private String taxRatetypeID;

  public static final String SERIALIZED_NAME_USE_GEO_TAX_AUXILIARY_FILE = "useGeoTaxAuxiliaryFile";
  @SerializedName(SERIALIZED_NAME_USE_GEO_TAX_AUXILIARY_FILE)
  private String useGeoTaxAuxiliaryFile;

  public LocalTaxPreferences() { 
  }

  public LocalTaxPreferences customPreferences(Map<String, Object> customPreferences) {
    
    this.customPreferences = customPreferences;
    return this;
  }

  public LocalTaxPreferences putCustomPreferencesItem(String key, Object customPreferencesItem) {
    if (this.customPreferences == null) {
      this.customPreferences = new HashMap<String, Object>();
    }
    this.customPreferences.put(key, customPreferencesItem);
    return this;
  }

   /**
   * Get customPreferences
   * @return customPreferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getCustomPreferences() {
    return customPreferences;
  }


  public void setCustomPreferences(Map<String, Object> customPreferences) {
    this.customPreferences = customPreferences;
  }


  public LocalTaxPreferences defaultBufferWidth(String defaultBufferWidth) {
    
    this.defaultBufferWidth = defaultBufferWidth;
    return this;
  }

   /**
   * Get defaultBufferWidth
   * @return defaultBufferWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultBufferWidth() {
    return defaultBufferWidth;
  }


  public void setDefaultBufferWidth(String defaultBufferWidth) {
    this.defaultBufferWidth = defaultBufferWidth;
  }


  public LocalTaxPreferences distanceUnits(String distanceUnits) {
    
    this.distanceUnits = distanceUnits;
    return this;
  }

   /**
   * Get distanceUnits
   * @return distanceUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDistanceUnits() {
    return distanceUnits;
  }


  public void setDistanceUnits(String distanceUnits) {
    this.distanceUnits = distanceUnits;
  }


  public LocalTaxPreferences fallbackToGeographic(String fallbackToGeographic) {
    
    this.fallbackToGeographic = fallbackToGeographic;
    return this;
  }

   /**
   * Get fallbackToGeographic
   * @return fallbackToGeographic
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getFallbackToGeographic() {
    return fallbackToGeographic;
  }


  public void setFallbackToGeographic(String fallbackToGeographic) {
    this.fallbackToGeographic = fallbackToGeographic;
  }


  public LocalTaxPreferences latLongFormat(String latLongFormat) {
    
    this.latLongFormat = latLongFormat;
    return this;
  }

   /**
   * Get latLongFormat
   * @return latLongFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLatLongFormat() {
    return latLongFormat;
  }


  public void setLatLongFormat(String latLongFormat) {
    this.latLongFormat = latLongFormat;
  }


  public LocalTaxPreferences latLongOffset(String latLongOffset) {
    
    this.latLongOffset = latLongOffset;
    return this;
  }

   /**
   * Get latLongOffset
   * @return latLongOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLatLongOffset() {
    return latLongOffset;
  }


  public void setLatLongOffset(String latLongOffset) {
    this.latLongOffset = latLongOffset;
  }


  public LocalTaxPreferences matchMode(String matchMode) {
    
    this.matchMode = matchMode;
    return this;
  }

   /**
   * Get matchMode
   * @return matchMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMatchMode() {
    return matchMode;
  }


  public void setMatchMode(String matchMode) {
    this.matchMode = matchMode;
  }


  public LocalTaxPreferences outputCasing(String outputCasing) {
    
    this.outputCasing = outputCasing;
    return this;
  }

   /**
   * Get outputCasing
   * @return outputCasing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOutputCasing() {
    return outputCasing;
  }


  public void setOutputCasing(String outputCasing) {
    this.outputCasing = outputCasing;
  }


  public LocalTaxPreferences returnCensusFields(String returnCensusFields) {
    
    this.returnCensusFields = returnCensusFields;
    return this;
  }

   /**
   * Get returnCensusFields
   * @return returnCensusFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReturnCensusFields() {
    return returnCensusFields;
  }


  public void setReturnCensusFields(String returnCensusFields) {
    this.returnCensusFields = returnCensusFields;
  }


  public LocalTaxPreferences returnLatLongFields(String returnLatLongFields) {
    
    this.returnLatLongFields = returnLatLongFields;
    return this;
  }

   /**
   * Get returnLatLongFields
   * @return returnLatLongFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReturnLatLongFields() {
    return returnLatLongFields;
  }


  public void setReturnLatLongFields(String returnLatLongFields) {
    this.returnLatLongFields = returnLatLongFields;
  }


  public LocalTaxPreferences squeeze(String squeeze) {
    
    this.squeeze = squeeze;
    return this;
  }

   /**
   * Get squeeze
   * @return squeeze
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSqueeze() {
    return squeeze;
  }


  public void setSqueeze(String squeeze) {
    this.squeeze = squeeze;
  }


  public LocalTaxPreferences taxRatetypeID(String taxRatetypeID) {
    
    this.taxRatetypeID = taxRatetypeID;
    return this;
  }

   /**
   * Get taxRatetypeID
   * @return taxRatetypeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxRatetypeID() {
    return taxRatetypeID;
  }


  public void setTaxRatetypeID(String taxRatetypeID) {
    this.taxRatetypeID = taxRatetypeID;
  }


  public LocalTaxPreferences useGeoTaxAuxiliaryFile(String useGeoTaxAuxiliaryFile) {
    
    this.useGeoTaxAuxiliaryFile = useGeoTaxAuxiliaryFile;
    return this;
  }

   /**
   * Get useGeoTaxAuxiliaryFile
   * @return useGeoTaxAuxiliaryFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUseGeoTaxAuxiliaryFile() {
    return useGeoTaxAuxiliaryFile;
  }


  public void setUseGeoTaxAuxiliaryFile(String useGeoTaxAuxiliaryFile) {
    this.useGeoTaxAuxiliaryFile = useGeoTaxAuxiliaryFile;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalTaxPreferences localTaxPreferences = (LocalTaxPreferences) o;
    return Objects.equals(this.customPreferences, localTaxPreferences.customPreferences) &&
        Objects.equals(this.defaultBufferWidth, localTaxPreferences.defaultBufferWidth) &&
        Objects.equals(this.distanceUnits, localTaxPreferences.distanceUnits) &&
        Objects.equals(this.fallbackToGeographic, localTaxPreferences.fallbackToGeographic) &&
        Objects.equals(this.latLongFormat, localTaxPreferences.latLongFormat) &&
        Objects.equals(this.latLongOffset, localTaxPreferences.latLongOffset) &&
        Objects.equals(this.matchMode, localTaxPreferences.matchMode) &&
        Objects.equals(this.outputCasing, localTaxPreferences.outputCasing) &&
        Objects.equals(this.returnCensusFields, localTaxPreferences.returnCensusFields) &&
        Objects.equals(this.returnLatLongFields, localTaxPreferences.returnLatLongFields) &&
        Objects.equals(this.squeeze, localTaxPreferences.squeeze) &&
        Objects.equals(this.taxRatetypeID, localTaxPreferences.taxRatetypeID) &&
        Objects.equals(this.useGeoTaxAuxiliaryFile, localTaxPreferences.useGeoTaxAuxiliaryFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customPreferences, defaultBufferWidth, distanceUnits, fallbackToGeographic, latLongFormat, latLongOffset, matchMode, outputCasing, returnCensusFields, returnLatLongFields, squeeze, taxRatetypeID, useGeoTaxAuxiliaryFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalTaxPreferences {\n");
    sb.append("    customPreferences: ").append(toIndentedString(customPreferences)).append("\n");
    sb.append("    defaultBufferWidth: ").append(toIndentedString(defaultBufferWidth)).append("\n");
    sb.append("    distanceUnits: ").append(toIndentedString(distanceUnits)).append("\n");
    sb.append("    fallbackToGeographic: ").append(toIndentedString(fallbackToGeographic)).append("\n");
    sb.append("    latLongFormat: ").append(toIndentedString(latLongFormat)).append("\n");
    sb.append("    latLongOffset: ").append(toIndentedString(latLongOffset)).append("\n");
    sb.append("    matchMode: ").append(toIndentedString(matchMode)).append("\n");
    sb.append("    outputCasing: ").append(toIndentedString(outputCasing)).append("\n");
    sb.append("    returnCensusFields: ").append(toIndentedString(returnCensusFields)).append("\n");
    sb.append("    returnLatLongFields: ").append(toIndentedString(returnLatLongFields)).append("\n");
    sb.append("    squeeze: ").append(toIndentedString(squeeze)).append("\n");
    sb.append("    taxRatetypeID: ").append(toIndentedString(taxRatetypeID)).append("\n");
    sb.append("    useGeoTaxAuxiliaryFile: ").append(toIndentedString(useGeoTaxAuxiliaryFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

