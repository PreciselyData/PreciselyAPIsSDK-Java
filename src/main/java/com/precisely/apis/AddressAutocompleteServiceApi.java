/*
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.precisely.apis;

import com.precisely.ApiCallback;
import com.precisely.ApiClient;
import com.precisely.ApiException;
import com.precisely.ApiResponse;
import com.precisely.Configuration;
import com.precisely.Pair;
import com.precisely.ProgressRequestBody;
import com.precisely.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.precisely.apis.model.ErrorInfo;
import com.precisely.apis.model.TypeaheadLocations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressAutocompleteServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressAutocompleteServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressAutocompleteServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchV2
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param longitude Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of POIs that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)
     * @param searchType Preference to control search type of interactive requests. (optional)
     * @param searchOnAddressNumber Preference to search on address number. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV2Call(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, String searchOnAddressNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/typeahead/v1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (searchRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchRadius", searchRadius));
        }

        if (searchRadiusUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchRadiusUnit", searchRadiusUnit));
        }

        if (maxCandidates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCandidates", maxCandidates));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (matchOnAddressNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchOnAddressNumber", matchOnAddressNumber));
        }

        if (autoDetectLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoDetectLocation", autoDetectLocation));
        }

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ipAddress", ipAddress));
        }

        if (areaName1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("areaName1", areaName1));
        }

        if (areaName3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("areaName3", areaName3));
        }

        if (postCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postCode", postCode));
        }

        if (returnAdminAreasOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAdminAreasOnly", returnAdminAreasOnly));
        }

        if (includeRangesDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRangesDetails", includeRangesDetails));
        }

        if (searchType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchType", searchType));
        }

        if (searchOnAddressNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchOnAddressNumber", searchOnAddressNumber));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentTypes != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchV2ValidateBeforeCall(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, String searchOnAddressNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'searchText' is set
        if (searchText == null) {
            throw new ApiException("Missing the required parameter 'searchText' when calling searchV2(Async)");
        }
        

        okhttp3.Call localVarCall = searchV2Call(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, searchOnAddressNumber, _callback);
        return localVarCall;

    }

    /**
     * Address Autocomplete Search
     * Performs search to retrieve list of places by input text and location vicinity.
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param longitude Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of POIs that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)
     * @param searchType Preference to control search type of interactive requests. (optional)
     * @param searchOnAddressNumber Preference to search on address number. (optional)
     * @return TypeaheadLocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TypeaheadLocations searchV2(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, String searchOnAddressNumber) throws ApiException {
        ApiResponse<TypeaheadLocations> localVarResp = searchV2WithHttpInfo(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, searchOnAddressNumber);
        return localVarResp.getData();
    }

    /**
     * Address Autocomplete Search
     * Performs search to retrieve list of places by input text and location vicinity.
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param longitude Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of POIs that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)
     * @param searchType Preference to control search type of interactive requests. (optional)
     * @param searchOnAddressNumber Preference to search on address number. (optional)
     * @return ApiResponse&lt;TypeaheadLocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TypeaheadLocations> searchV2WithHttpInfo(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, String searchOnAddressNumber) throws ApiException {
        okhttp3.Call localVarCall = searchV2ValidateBeforeCall(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, searchOnAddressNumber, null);
        Type localVarReturnType = new TypeToken<TypeaheadLocations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Address Autocomplete Search (asynchronously)
     * Performs search to retrieve list of places by input text and location vicinity.
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param longitude Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of POIs that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)
     * @param searchType Preference to control search type of interactive requests. (optional)
     * @param searchOnAddressNumber Preference to search on address number. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV2Async(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, String searchOnAddressNumber, final ApiCallback<TypeaheadLocations> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchV2ValidateBeforeCall(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, searchOnAddressNumber, _callback);
        Type localVarReturnType = new TypeToken<TypeaheadLocations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
